[
["index.html", "Script repository (Hench et al. supplement) 1 Intro 1.1 Analysis 1.2 Figures", " Script repository (Hench et al. supplement) Kosmas Hench 2019-10-25 1 Intro This repository contains a collection of scripts used in the paper “The genomic origins of a marine radiation”. 1.1 Analysis A documentation of the data preparation and the data analysis can be found at: Genotyping 1.2 Figures A more detailed documentation exists for all the figures of the manuscript: F1, F2 &amp; F3 as well as for all the supplementary figures: All scripts assume two variables to be set within the bash environment: $BASE_DIR is assumed to point to the base folder of this repository $SFTWR is a folder that contains all the software dependencies that are used within the scripts The dependencies need to be downloaded and installed separately. "],
["genotyping.html", "2 Genotyping 2.1 Summary 2.2 Details of genotyping.nf", " 2 Genotyping 2.1 Summary The genotyping procedure is controlled by the nextflow script genotyping.nf (located under $BASE_DIR/nf/genotyping). It takes the analysis from the raw sequencing data to the genotyped and phased SNPs. Below is an overview of the steps involved in the genotyping process. 2.2 Details of genotyping.nf 2.2.1 Data preparation The nextflow script starts with a small header and then opens the analysis by reading a table with meta data about the samples: #!/usr/bin/env nextflow /* =============================================================== Disclaimer: This pipeline needs a lot of time &amp; memory to run: All in all we used roughly 10 TB and ran for about 1 Month (mainly due to limited bandwidth on the cluster durint the &quot;receive_tuple step) =============================================================== */ /* open the pipeline based on the metadata spread sheet that includes all * information necessary to assign read groups to the sequencing data */ params.index = &apos;../../metadata/file_info.txt&apos; Below is a little preview of the table containing the sample meta data: id label spec geo date coord_N coord_W company .. 16_21-30 16_21-30nigpan nig pan 2016 NA NA duke … 16_21-30 16_21-30nigpan nig pan 2016 NA NA duke … 16_31-40 16_31-40unipan uni pan 2016 NA NA duke … 16_31-40 16_31-40unipan uni pan 2016 NA NA duke … 17996 17996indbel ind bel 2004-07-27 16.801 -88.079 novogene … 17997 17997indbel ind bel 2004-07-27 16.801 -88.079 novogene … … … … … … … … … The table is parsed and the values are stored in nextflow variables. /* split the spread sheet by row and feed it into a channel */ Channel .fromPath(params.index) .splitCsv(header:true, sep:&quot;\\t&quot;) .map{ row -&gt; [ id:row.id, label:row.label, file_fwd:row.file_fwd, file_rev:row.file_rev, flowcell_id_fwd:row.flowcell_id_fwd, lane_fwd:row.lane_fwd, company:row.company] } .set { samples_ch } The first step to prepare the data for the GATK best practices is to convert the sample sequences from *.fq to *.bam format to assign read groups: /* for every sequencing file, convert into ubam format and assign read groups */ process split_samples { label &apos;L_20g2h_split_samples&apos; input: val x from samples_ch output: set val( &quot;${x.label}.${x.lane_fwd}&quot; ), file( &quot;${x.label}.${x.lane_fwd}.ubam.bam&quot; ) into ubams_mark, ubams_merge script: &quot;&quot;&quot; echo -e &quot;---------------------------------&quot; echo -e &quot;Label:\\t\\t${x.label}\\nFwd:\\t\\t${x.file_fwd}\\nRev:\\t\\t${x.file_rev}&quot; echo -e &quot;Flowcell:\\t${x.flowcell_id_fwd}\\nLane:\\t\\t${x.lane_fwd}&quot; echo -e &quot;Read group:\\t${x.flowcell_id_fwd}.${x.lane_fwd}\\nCompany:\\t${x.company}&quot; mkdir -p \\$BASE_DIR/temp_files gatk --java-options &quot;-Xmx20G&quot; \\ FastqToSam \\ -SM=${x.label} \\ -F1=\\$BASE_DIR/data/seqdata/${x.file_fwd} \\ -F2=\\$BASE_DIR/data/seqdata/${x.file_rev} \\ -O=${x.label}.${x.lane_fwd}.ubam.bam \\ -RG=${x.label}.${x.lane_fwd} \\ -LB=${x.label}&quot;.lib1&quot; \\ -PU=${x.flowcell_id_fwd}.${x.lane_fwd} \\ -PL=Illumina \\ -CN=${x.company} \\ --TMP_DIR=\\$BASE_DIR/temp_files; &quot;&quot;&quot; } The second step is mariking the Illumina adaptors. /* for every ubam file, mark Illumina adapters */ process mark_adapters { label &apos;L_20g2h_mark_adapters&apos; tag &quot;${sample}&quot; input: set val( sample ), file( input ) from ubams_mark output: set val( sample ), file( &quot;*.adapter.bam&quot;) into adapter_bams file &quot;*.adapter.metrics.txt&quot; into adapter_metrics script: &quot;&quot;&quot; gatk --java-options &quot;-Xmx18G&quot; \\ MarkIlluminaAdapters \\ -I=${input} \\ -O=${sample}.adapter.bam \\ -M=${sample}.adapter.metrics.txt \\ -TMP_DIR=\\$BASE_DIR/temp_files; &quot;&quot;&quot; } We need to pass on the unaligned .bam file and the file containing the adapter information together, so the output of the first two processes are matched by the combined sample and sequencing lane information. adapter_bams .combine(ubams_merge, by:0) .set {merge_input} For the actual mapping, the sequences are transformed back into .fq format, aligned using bwa and merged back with their original read group information. /* this step includes a 3 step pipeline: * - re-transformatikon into fq format * - mapping aginst the reference genome_file * - merging with the basuch ubams to include read group information */ process map_and_merge { label &apos;L_75g24h8t_map_and_merge&apos; tag &quot;${sample}&quot; input: set val( sample ), file( adapter_bam_input ), file( ubam_input ) from merge_input output: set val( sample ), file( &quot;*.mapped.bam&quot; ) into mapped_bams script: &quot;&quot;&quot; set -o pipefail gatk --java-options &quot;-Xmx68G&quot; \\ SamToFastq \\ -I=${adapter_bam_input} \\ -FASTQ=/dev/stdout \\ -INTERLEAVE=true \\ -NON_PF=true \\ -TMP_DIR=\\$BASE_DIR/temp_files | \\ bwa mem -M -t 8 -p \\$BASE_DIR/ressources/HP_genome_unmasked_01.fa /dev/stdin | gatk --java-options &quot;-Xmx68G&quot; \\ MergeBamAlignment \\ --VALIDATION_STRINGENCY SILENT \\ --EXPECTED_ORIENTATIONS FR \\ --ATTRIBUTES_TO_RETAIN X0 \\ -ALIGNED_BAM=/dev/stdin \\ -UNMAPPED_BAM=${ubam_input} \\ -OUTPUT=${sample}.mapped.bam \\ --REFERENCE_SEQUENCE=\\$BASE_DIR/ressources/HP_genome_unmasked_01.fa.gz \\ -PAIRED_RUN true \\ --SORT_ORDER &quot;unsorted&quot; \\ --IS_BISULFITE_SEQUENCE false \\ --ALIGNED_READS_ONLY false \\ --CLIP_ADAPTERS false \\ --MAX_RECORDS_IN_RAM 2000000 \\ --ADD_MATE_CIGAR true \\ --MAX_INSERTIONS_OR_DELETIONS -1 \\ --PRIMARY_ALIGNMENT_STRATEGY MostDistant \\ --UNMAPPED_READ_STRATEGY COPY_TO_TAG \\ --ALIGNER_PROPER_PAIR_FLAGS true \\ --UNMAP_CONTAMINANT_READS true \\ -TMP_DIR=\\$BASE_DIR/temp_files &quot;&quot;&quot; } Next, the duplicates are being marked. /* for every mapped sample,sort and mark duplicates * (intermediate step is required to create .bai file) */ process mark_duplicates { label &apos;L_32g30h_mark_duplicates&apos; publishDir &quot;../../1_genotyping/0_sorted_bams/&quot;, mode: &apos;symlink&apos; tag &quot;${sample}&quot; input: set val( sample ), file( input ) from mapped_bams output: set val { sample - ~/\\.(\\d+)/ }, val( sample ), file( &quot;*.dedup.bam&quot;) into dedup_bams file &quot;*.dedup.metrics.txt&quot; into dedup_metrics script: &quot;&quot;&quot; set -o pipefail gatk --java-options &quot;-Xmx30G&quot; \\ SortSam \\ -I=${input} \\ -O=/dev/stdout \\ --SORT_ORDER=&quot;coordinate&quot; \\ --CREATE_INDEX=false \\ --CREATE_MD5_FILE=false \\ -TMP_DIR=\\$BASE_DIR/temp_files \\ | \\ gatk --java-options &quot;-Xmx30G&quot; \\ SetNmAndUqTags \\ --INPUT=/dev/stdin \\ --OUTPUT=intermediate.bam \\ --CREATE_INDEX=true \\ --CREATE_MD5_FILE=true \\ -TMP_DIR=\\$BASE_DIR/temp_files \\ --REFERENCE_SEQUENCE=\\$BASE_DIR/ressources/HP_genome_unmasked_01.fa.gz gatk --java-options &quot;-Xmx30G&quot; \\ MarkDuplicates \\ -I=intermediate.bam \\ -O=${sample}.dedup.bam \\ -M=${sample}.dedup.metrics.txt \\ -MAX_FILE_HANDLES=1000 \\ -TMP_DIR=\\$BASE_DIR/temp_files rm intermediate* &quot;&quot;&quot; } As a preparation for the actual genotyping, the .bam files are being indexed. /* index al bam files */ process index_bam { label &apos;L_32g1h_index_bam&apos; tag &quot;${sample}&quot; input: set val( sample ), val( sample_lane ), file( input ) from dedup_bams output: set val( sample ), val( sample_lane ), file( input ), file( &quot;*.bai&quot;) into ( indexed_bams, pir_bams ) script: &quot;&quot;&quot; gatk --java-options &quot;-Xmx30G&quot; \\ BuildBamIndex \\ -INPUT=${input} &quot;&quot;&quot; } At this point the preparation of the sequencing is done and we can start with the genotyping. (The output of the data preparation is split and one copy is later also used to prepare the read aware phasing in the process called extractPirs.) 2.2.2 Genotying Since some of our samples were split over several lanes, we now need to collect all .bam files for each sample. /* collect all bam files for each sample */ indexed_bams .groupTuple() .set {tubbled} Now, we can create the genotype likelyhoods for each individual sample. /* create one *.g.vcf file per sample */ process receive_tuple { label &apos;L_36g47h_receive_tuple&apos; publishDir &quot;../../1_genotyping/1_gvcfs/&quot;, mode: &apos;symlink&apos; tag &quot;${sample}&quot; input: set sample, sample_lane, bam, bai from tubbled output: file( &quot;*.g.vcf.gz&quot;) into gvcfs file( &quot;*.vcf.gz.tbi&quot;) into tbis script: &quot;&quot;&quot; INPUT=\\$(echo ${bam} | sed &apos;s/\\\\[/-I /g; s/\\\\]//g; s/,/ -I/g&apos;) gatk --java-options &quot;-Xmx35g&quot; HaplotypeCaller \\ -R=\\$BASE_DIR/ressources/HP_genome_unmasked_01.fa \\ \\$INPUT \\ -O ${sample}.g.vcf.gz \\ -ERC GVCF &quot;&quot;&quot; } The individual genotype likelyhoods are collected and combined for the entire data set. /* collect and combine all *.g.vcf files */ process gather_gvcfs { label &apos;L_O88g90h_gather_gvcfs&apos; publishDir &quot;../../1_genotyping/1_gvcfs/&quot;, mode: &apos;symlink&apos; echo true input: file( gvcf ) from gvcfs.collect() file( tbi ) from tbis.collect() output: set file( &quot;cohort.g.vcf.gz&quot; ), file( &quot;cohort.g.vcf.gz.tbi&quot; ) into ( gcvf_snps, gvcf_acs, gvcf_indel ) script: &quot;&quot;&quot; GVCF=\\$(echo &quot; ${gvcf}&quot; | sed &apos;s/ /-V /g; s/vcf.gz/vcf.gz /g&apos;) gatk --java-options &quot;-Xmx85g&quot; \\ CombineGVCFs \\ -R=\\$BASE_DIR/ressources/HP_genome_unmasked_01.fa \\ \\$GVCF \\ -O cohort.g.vcf.gz &quot;&quot;&quot; } All samples are jointly genotyped. /* actual genotyping step (varinat sites only) */ process joint_genotype_snps { label &apos;L_O88g90h_joint_genotype&apos; publishDir &quot;../../1_genotyping/2_raw_vcfs/&quot;, mode: &apos;symlink&apos; input: set file( vcf ), file( tbi ) from gcvf_snps output: set file( &quot;raw_var_sites.vcf.gz&quot; ), file( &quot;raw_var_sites.vcf.gz.tbi&quot; ) into ( raw_var_sites, raw_var_sites_to_metrics ) script: &quot;&quot;&quot; gatk --java-options &quot;-Xmx85g&quot; \\ GenotypeGVCFs \\ -R=\\$BASE_DIR/ressources/HP_genome_unmasked_01.fa \\ -V=${vcf} \\ -O=intermediate.vcf.gz gatk --java-options &quot;-Xmx85G&quot; \\ SelectVariants \\ -R=\\$BASE_DIR/ressources/HP_genome_unmasked_01.fa \\ -V=intermediate.vcf.gz \\ --select-type-to-include=SNP \\ -O=raw_var_sites.vcf.gz rm intermediate.* &quot;&quot;&quot; } The output of this process is split and used to collect the genotype metrics to inform the hard filtering of SNPs and to pass on the genotypes to the process called filterSNPs. At this point we create a channel containing all 24 hamlet linkage groups (LGs). This is used later (in the process called extractPirs) since all LGs are phased separately and only located at this part of the script for historical reasons (sorry :/). /* generate a LG channel */ Channel .from( (&apos;01&apos;..&apos;09&apos;) + (&apos;10&apos;..&apos;19&apos;) + (&apos;20&apos;..&apos;24&apos;) ) .into{ LG_ids1; LG_ids2 } The metrics of the raw genotypes are collected. /* produce metrics table to determine filtering thresholds - ups forgot to extract SNPS first*/ process joint_genotype_metrics { label &apos;L_28g5h_genotype_metrics&apos; publishDir &quot;../../1_genotyping/2_raw_vcfs/&quot;, mode: &apos;move&apos; input: set file( vcf ), file( tbi ) from raw_var_sites_to_metrics output: file( &quot;${vcf}.table.txt&quot; ) into raw_metrics script: &quot;&quot;&quot; gatk --java-options &quot;-Xmx25G&quot; \\ VariantsToTable \\ --variant=${vcf} \\ --output=${vcf}.table.txt \\ -F=CHROM -F=POS -F=MQ \\ -F=QD -F=FS -F=MQRankSum -F=ReadPosRankSum \\ --show-filtered &quot;&quot;&quot; } Based on the thresholds derived from the genotype metrics, the genotypes are first tagged and then filtered. After this, the data is filtered for missingness and only bi-allelic SNPs are selected. /* filter snps basaed on locus annotations, missingness and type (bi-allelic only) */ process filterSNPs { label &apos;L_78g10h_filter_Snps&apos; publishDir &quot;../../1_genotyping/3_gatk_filtered/&quot;, mode: &apos;symlink&apos; input: set file( vcf ), file( tbi ) from raw_var_sites output: set file( &quot;filterd_bi-allelic.vcf.gz&quot; ), file( &quot;filterd_bi-allelic.vcf.gz.tbi&quot; ) into filtered_snps script: &quot;&quot;&quot; gatk --java-options &quot;-Xmx75G&quot; \\ VariantFiltration \\ -R=\\$BASE_DIR/ressources/HP_genome_unmasked_01.fa \\ -V ${vcf} \\ -O=intermediate.vcf.gz \\ --filter-expression &quot;QD &lt; 2.5&quot; \\ --filter-name &quot;filter_QD&quot; \\ --filter-expression &quot;FS &gt; 25.0&quot; \\ --filter-name &quot;filter_FS&quot; \\ --filter-expression &quot;MQ &lt; 52.0 || MQ &gt; 65.0&quot; \\ --filter-name &quot;filter_MQ&quot; \\ --filter-expression &quot;MQRankSum &lt; -0.2 || MQRankSum &gt; 0.2&quot; \\ --filter-name &quot;filter_MQRankSum&quot; \\ --filter-expression &quot;ReadPosRankSum &lt; -2.0 || ReadPosRankSum &gt; 2.0 &quot; \\ --filter-name &quot;filter_ReadPosRankSum&quot; gatk --java-options &quot;-Xmx75G&quot; \\ SelectVariants \\ -R=\\$BASE_DIR/ressources/HP_genome_unmasked_01.fa \\ -V=intermediate.vcf.gz \\ -O=intermediate.filterd.vcf.gz \\ --exclude-filtered vcftools \\ --gzvcf intermediate.filterd.vcf.gz \\ --max-missing-count 17 \\ --max-alleles 2 \\ --stdout \\ --recode | \\ bgzip &gt; filterd_bi-allelic.vcf.gz tabix -p vcf filterd_bi-allelic.vcf.gz rm intermediate.* &quot;&quot;&quot; } At this point, the genotying is done. 2.2.3 Phasing To get from genotypes to haplotypes, we apply read-aware phasing using Shapeit. This takes the original sequencing reads into account, so in the first step the reads are screened for Phase Informative Reads (i.e. reads containing more than a single SNP). This needs to be done for each LG independedly, so we first need to split the genotypes before running extractPIRs. process extractPirs { label &apos;L_78g10h_extract_pirs&apos; input: val( lg ) from LG_ids2 set val( sample ), val( sample_lane ), file( input ), file( index ) from pir_bams.collect() set file( vcf ), file( tbi ) from filtered_snps output: set val( lg ), file( &quot;filterd_bi-allelic.LG${lg}.vcf.gz&quot; ), file( &quot;filterd_bi-allelic.LG${lg}.vcf.gz.tbi&quot; ), file( &quot;PIRsList-LG${lg}.txt&quot; ) into pirs_lg script: &quot;&quot;&quot; LG=&quot;LG${lg}&quot; awk -v OFS=&apos;\\t&apos; -v dir=\\$PWD -v lg=\\$LG &apos;{print \\$1,dir&quot;/&quot;\\$2,lg}&apos; \\$BASE_DIR/metadata/bamlist_proto.txt &gt; bamlist.txt vcftools \\ --gzvcf ${vcf} \\ --chr \\$LG \\ --stdout \\ --recode | \\ bgzip &gt; filterd_bi-allelic.LG${lg}.vcf.gz tabix -p vcf filterd_bi-allelic.LG${lg}.vcf.gz extractPIRs \\ --bam bamlist.txt \\ --vcf filterd_bi-allelic.LG${lg}.vcf.gz \\ --out PIRsList-LG${lg}.txt \\ --base-quality 20 \\ --read-quality 15 &quot;&quot;&quot; } Using those PIRs, we can then proceed with the actual phasing. The resulting haplotypes are converted back into .vcf format. process run_shapeit { label &apos;L_75g24h8t_run_shapeit&apos; input: set val( lg ), file( vcf ), file( tbi ), file( pirs ) from pirs_lg output: file( &quot;phased-LG${lg}.vcf.gz&quot; ) into phased_lgs script: &quot;&quot;&quot; LG=&quot;LG${lg}&quot; shapeit \\ -assemble \\ --input-vcf ${vcf} \\ --input-pir ${pirs} \\ --thread 8 \\ -O phased-LG${lg} shapeit \\ -convert \\ --input-hap phased-LG${lg} \\ --output-vcf phased-LG${lg}.vcf bgzip phased-LG${lg}.vcf &quot;&quot;&quot; } After the phasing, we merge the LGs back together to get a single data set. We export a comple data set as well as one that was filtered for a minor allele count of at least two. process merge_phased { label &apos;L_28g5h_merge_phased_vcf&apos; publishDir &quot;../../1_genotyping/4_phased/&quot;, mode: &apos;move&apos; input: file( vcf ) from phased_lgs.collect() output: set file( &quot;phased.vcf.gz&quot; ), file( &quot;phased.vcf.gz.tbi&quot; ) into phased_vcf set file( &quot;phased_mac2.vcf.gz&quot; ), file( &quot;phased_mac2.vcf.gz.tbi&quot; ) into phased_mac2_vcf script: &quot;&quot;&quot; vcf-concat \\ phased-LG* | \\ grep -v ^\\$ | \\ tee phased.vcf | \\ vcftools --vcf - --mac 2 --recode --stdout | \\ bgzip &gt; phased_mac2.vcf.gz bgzip phased.vcf tabix -p vcf phased.vcf.gz tabix -p vcf phased_mac2.vcf.gz &quot;&quot;&quot; } Finally, we are done with the entire genotyping procedure. 2.2.4 Appendix Note that the following steps are not included in the opening diagram of this script. Allthough the genotyping is done at this point, we can still use the structure of this workflow to prepare some input for later analysis Specifically, we are preparing filter masks for msmc based on the occurence of indels within the data set. For this, we need to also call indels from the genotype likelyhoods. /* ========================================= */ /* appendix: generate indel masks for msmc: */ Channel .fromFilePairs(&quot;../../1_genotyping/1_gvcfs/cohort.g.vcf.{gz,gz.tbi}&quot;) .set{ cohort_gvcf } process joint_genotype_indel { label &apos;L_O88g90h_genotype_indel&apos; publishDir &quot;../../1_genotyping/2_raw_vcfs/&quot;, mode: &apos;copy&apos; input: set file( vcf ), file( tbi ) from gvcf_indel output: set file( &quot;raw_var_indel.vcf.gz&quot; ), file( &quot;raw_var_indel.vcf.gz.tbi&quot; ) into ( raw_indel, raw_indel_to_metrics ) script: &quot;&quot;&quot; gatk --java-options &quot;-Xmx85g&quot; \\ GenotypeGVCFs \\ -R=\\$REF_GENOME \\ -V=${vcf} \\ -O=intermediate.vcf.gz gatk --java-options &quot;-Xmx85G&quot; \\ SelectVariants \\ -R=\\$REF_GENOME \\ -V=intermediate.vcf.gz \\ --select-type-to-include=INDEL \\ -O=raw_var_indel.vcf.gz rm intermediate.* &quot;&quot;&quot; } The indels also need to be filtered, so again we extract some genotyping metrics. process indel_metrics { label &apos;L_28g5h_genotype_metrics&apos; publishDir &quot;../../1_genotyping/2_raw_vcfs/&quot;, mode: &apos;copy&apos; input: set file( vcf ), file( tbi ) from raw_indel_to_metrics output: file( &quot;${vcf}.table.txt&quot; ) into raw_indel_metrics script: &quot;&quot;&quot; gatk --java-options &quot;-Xmx25G&quot; \\ VariantsToTable \\ --variant=${vcf} \\ --output=${vcf}.table.txt \\ -F=CHROM -F=POS -F=MQ \\ -F=QD -F=FS -F=MQRankSum -F=ReadPosRankSum \\ --show-filtered &quot;&quot;&quot; } Based on the thresholds derived from the genotyping metrics, the indels are first tagged and then filtered. After this, the data is reformated into a simple .bed file containing the locations of all indels. process filterIndels { label &apos;L_78g10h_filter_indels&apos; publishDir &quot;../../1_genotyping/3_gatk_filtered/&quot;, mode: &apos;copy&apos; input: set file( vcf ), file( tbi ) from raw_indel output: set file( &quot;filterd.indel.vcf.gz&quot; ), file( &quot;filterd.indel.vcf.gz.tbi&quot; ) into filtered_indel file( &quot;indel_mask.bed.gz&quot; ) into indel_mask_ch /* FILTER THRESHOLDS NEED TO BE UPDATED */ script: &quot;&quot;&quot; gatk --java-options &quot;-Xmx75G&quot; \\ VariantFiltration \\ -R=\\$REF_GENOME \\ -V ${vcf} \\ -O=intermediate.vcf.gz \\ --filter-expression &quot;QD &lt; 2.5&quot; \\ --filter-name &quot;filter_QD&quot; \\ --filter-expression &quot;FS &gt; 25.0&quot; \\ --filter-name &quot;filter_FS&quot; \\ --filter-expression &quot;MQ &lt; 52.0 || MQ &gt; 65.0&quot; \\ --filter-name &quot;filter_MQ&quot; \\ --filter-expression &quot;SOR &gt; 3.0&quot; \\ --filter-name &quot;filter_SOR&quot; \\ --filter-expression &quot;InbreedingCoeff &lt; -0.25&quot; \\ --filter-name &quot;filter_InbreedingCoeff&quot; \\ --filter-expression &quot;MQRankSum &lt; -0.2 || MQRankSum &gt; 0.2&quot; \\ --filter-name &quot;filter_MQRankSum&quot; \\ --filter-expression &quot;ReadPosRankSum &lt; -2.0 || ReadPosRankSum &gt; 2.0 &quot; \\ --filter-name &quot;filter_ReadPosRankSum&quot; gatk --java-options &quot;-Xmx75G&quot; \\ SelectVariants \\ -R=\\$REF_GENOME \\ -V=intermediate.vcf.gz \\ -O=filterd.indel.vcf.gz \\ --exclude-filtered zcat filterd.indel.vcf.gz | \\ awk &apos;! /\\\\#/&apos; | \\ awk &apos;{if(length(\\$4) &gt; length(\\$5)) print \\$1&quot;\\\\t&quot;(\\$2-6)&quot;\\\\t&quot;(\\$2+length(\\$4)+4); else print \\$1&quot;\\\\t&quot;(\\$2-6)&quot;\\\\t&quot;(\\$2+length(\\$5)+4)}&apos; | \\ gzip -c &gt; indel_mask.bed.gz rm intermediate.* &quot;&quot;&quot; } We are going to need the indels for each LG sepetately, so we prepare a nextflow Channel of LGs for the splitting. /* create channel of linkage groups */ Channel .from( (&apos;01&apos;..&apos;09&apos;) + (&apos;10&apos;..&apos;19&apos;) + (&apos;20&apos;..&apos;24&apos;) ) .map{ &quot;LG&quot; + it } .into{ lg_ch } lg_ch.combine( filtered_indel ).set{ filtered_indel_lg } process split_indel_mask { label &apos;L_loc_split_indel_mask&apos; publishDir &quot;../../ressources/indel_masks/&quot;, mode: &apos;copy&apos; input: set val( lg ), file( bed ) from filtered_indel_lg output: set val( lg ), file( &quot;indel_mask.${lg}.bed.gz &quot; ) into lg_indel_mask script: &quot;&quot;&quot; gzip -cd ${bed} | \\ grep ${lg} | \\ gzip -c &gt; indel_mask.${lg}.bed.gz &quot;&quot;&quot; } After splitting, the indel masks are ready for use with msmc. "],
["figure-1.html", "3 Figure 1 3.1 Summary 3.2 Details of plot_F1.R", " 3 Figure 1 3.1 Summary This is the accessory documentation of Figure 1. The Figure can be recreated by running the R script plot_F1.R: cd $BASE_DIR Rscript --vanilla R/fig/plot_F1.R 2_analysis/dxy/50k/ 2_analysis/fst/50k/ 3.2 Details of plot_F1.R In the following, the individual steps of the R script are documented. It is an executable R script that depends on the accessory R package GenomicOriginsScripts. 3.2.1 Config The scripts start with a header that contains copy &amp; paste templates to execute or debug the script: #!/usr/bin/env Rscript # run from terminal: # Rscript --vanilla R/fig/plot_F1.R 2_analysis/dxy/50k/ 2_analysis/fst/50k/ # =============================================================== # This script produces Figure 1 of the study &quot;The genomic origins of a marine radiation&quot; # by Hench, McMillan an Puebla # --------------------------------------------------------------- # =============================================================== # args &lt;- c(&#39;2_analysis/dxy/50k/&#39;, &#39;2_analysis/fst/50k/&#39;) The next section processes the input from the command line. It stores the arguments in the vector args. The R package GenomicOriginsScripts is loaded and the script name and the current working directory are stored inside variables (script_name, plot_comment). This information will later be written into the meta data of the figure to help us tracing back the scripts that created the figures in the future. Then we drop all the imported information besides the arguments following the script name and print the information to the terminal. args = commandArgs(trailingOnly=FALSE) # setup ----------------------- library(GenomicOriginsScripts) library(hypoimg) cat(&#39;\\n&#39;) script_name &lt;- args[5] %&gt;% str_remove(.,&#39;--file=&#39;) plot_comment &lt;- script_name %&gt;% str_c(&#39;mother-script = &#39;,getwd(),&#39;/&#39;,.) args &lt;- process_input(script_name, args) #&gt; ── Script: scripts/plot_F1.R ──────────────────────────────────────────── #&gt; Parameters read: #&gt; ★ 1: 2_analysis/dxy/50k/ #&gt; ★ 2: 2_analysis/fst/50k/ #&gt; ─────────────────────────────────────────── /current/working/directory ── The directories for the different data types are received and stored in respective variables. Also, we set a few parameters for the plot layout: # config ----------------------- dxy_dir &lt;- as.character(args[1]) fst_dir &lt;- as.character(args[2]) wdh &lt;- .3 # The width of the boxplots scaler &lt;- 20 # the ratio of the Fst and the dxy axis clr_sec &lt;- &#39;gray&#39; # the color of the secondary axis (dxy) 3.2.2 Data import We begin with the data import by first collecting the paths to all files containing either FST or dXY data (dir()), then iterating the import function over all files (map(summarize_fst)) and finally combining the outputs into a single tibble (bind_rows()). This is done for both FST and dXY. # start script ------------------- # import Fst fst_files &lt;- dir(fst_dir, pattern = &#39;.50k.windowed.weir.fst.gz&#39;) fst_data &lt;- str_c(fst_dir,fst_files) %&gt;% purrr::map(summarize_fst) %&gt;% bind_rows() ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message # import dxy dxy_files &lt;- dir(dxy_dir) dxy_data &lt;- str_c(dxy_dir,dxy_files) %&gt;% purrr::map(summarize_dxy) %&gt;% bind_rows() ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_abehon, pi_gumhon, dxy_abehon_gumhon, Fst_abeho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_abehon, pi_nighon, dxy_abehon_nighon, Fst_abeho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,100 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_abehon, pi_puehon, dxy_abehon_puehon, Fst_abeho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,089 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_abehon, pi_ranhon, dxy_abehon_ranhon, Fst_abeho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_abehon, pi_unihon, dxy_abehon_unihon, Fst_abeho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_gumhon, pi_nighon, dxy_gumhon_nighon, Fst_gumho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_gumhon, pi_puehon, dxy_gumhon_puehon, Fst_gumho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_gumhon, pi_ranhon, dxy_gumhon_ranhon, Fst_gumho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 109,930 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_gumhon, pi_unihon, dxy_gumhon_unihon, Fst_gumho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_indbel, pi_maybel, dxy_indbel_maybel, Fst_indbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,195 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_indbel, pi_nigbel, dxy_indbel_nigbel, Fst_indbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_indbel, pi_puebel, dxy_indbel_puebel, Fst_indbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_indbel, pi_unibel, dxy_indbel_unibel, Fst_indbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_maybel, pi_nigbel, dxy_maybel_nigbel, Fst_maybe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_maybel, pi_puebel, dxy_maybel_puebel, Fst_maybe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_maybel, pi_unibel, dxy_maybel_unibel, Fst_maybe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nigbel, pi_puebel, dxy_nigbel_puebel, Fst_nigbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nigbel, pi_unibel, dxy_nigbel_unibel, Fst_nigbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nighon, pi_puehon, dxy_nighon_puehon, Fst_nigho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,100 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nighon, pi_ranhon, dxy_nighon_ranhon, Fst_nigho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,093 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nighon, pi_unihon, dxy_nighon_unihon, Fst_nigho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,011 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nigpan, pi_puepan, dxy_nigpan_puepan, Fst_nigpa... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nigpan, pi_unipan, dxy_nigpan_unipan, Fst_nigpa... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,104 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_puebel, pi_unibel, dxy_puebel_unibel, Fst_puebe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,103 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_puehon, pi_ranhon, dxy_puehon_ranhon, Fst_pueho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,108 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_puehon, pi_unihon, dxy_puehon_unihon, Fst_pueho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,090 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_puepan, pi_unipan, dxy_puepan_unipan, Fst_puepa... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,095 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_ranhon, pi_unihon, dxy_ranhon_unihon, Fst_ranho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message We use the genome wide average FST to rank the individual pair wise comparisons. fst_order &lt;- fst_data %&gt;% select(run, `mean_weighted-fst`) %&gt;% mutate(run = fct_reorder(run,`mean_weighted-fst`)) Then, we merge the FST and dXY data sets and do quite a bit of data wrangling to create a rescaled dXY value and to prepare the placement of the boxplots. data &lt;- left_join(fst_data, dxy_data) %&gt;% select(c(8,1:7,9:15)) %&gt;% # transfrom table from short to long format gather(key = &#39;stat&#39;, value = &#39;val&#39;,2:15) %&gt;% # separating the boxplot element from the population genetic parameter separate(stat, into = c(&#39;sumstat&#39;,&#39;popstat&#39;),sep = &#39;_&#39;) %&gt;% # rescaleing the dxy values to fall in the range of Fst mutate(val_scaled = ifelse(popstat == &#39;dxy&#39;, val * scaler , val)) %&gt;% # combining original and rescaled values unite(temp, val, val_scaled) %&gt;% # back transforming to short format spread(.,key = &#39;sumstat&#39;,value = &#39;temp&#39;) %&gt;% # separating original and rescaled values for all boxplot elements separate(mean, into = c(&#39;mean&#39;,&#39;mean_scaled&#39;),sep = &#39;_&#39;, convert = TRUE) %&gt;% separate(median, into = c(&#39;median&#39;,&#39;median_scaled&#39;),sep = &#39;_&#39;, convert = TRUE) %&gt;% separate(sd, into = c(&#39;sd&#39;,&#39;sd_scaled&#39;),sep = &#39;_&#39;, convert = TRUE) %&gt;% separate(lower, into = c(&#39;lower&#39;,&#39;lower_scaled&#39;),sep = &#39;_&#39;, convert = TRUE) %&gt;% separate(upper, into = c(&#39;upper&#39;,&#39;upper_scaled&#39;),sep = &#39;_&#39;, convert = TRUE) %&gt;% separate(lowpoint, into = c(&#39;lowpoint&#39;,&#39;lowpoint_scaled&#39;),sep = &#39;_&#39;, convert = TRUE) %&gt;% separate(highpoint, into = c(&#39;highpoint&#39;,&#39;highpoint_scaled&#39;),sep = &#39;_&#39;, convert = TRUE) %&gt;% # adding preparations for plotting mutate(loc = str_sub(run,4,6), # extract location from run run = factor(run, levels = levels(fst_order$run)), # introduce the run ranking x = as.numeric(run) , # extract rank of runs (base x) x_dodge = ifelse(popstat == &#39;dxy&#39;,x + .25,x - .25), # shift dxy to the right, fst left x_start_dodge = x_dodge - wdh/2, # boxplot left border x_end_dodge = x_dodge + wdh/2, # boxplot right border popstat_loc = str_c(popstat,&#39;[&#39;,loc,&#39;]&#39;)) # parameter X location (for color) At this point, the data is ready for the boxplots. But first we are going to prepare the networks of pairwise comparisons. For this we create a tibble of the runs with their respective rank. Then, we prepare a config table with one row per location, storing the parameters neede for the layout function for the networks. We need to define the location, the number of species at the location, the short three letter ID of those species and a wheight parameter that is shifting the comparison label on the link within the networks. Finally, we create one network plot per location. # preparing a run/rnk lookup table run_ord &lt;- tibble(run = levels(data$run), run_ord = 1:length(levels(data$run))) # network config and layout networx &lt;- tibble( loc = c(&#39;bel&#39;,&#39;hon&#39;, &#39;pan&#39;), n = c(5,6,3), label = list(str_c(c(&#39;ind&#39;,&#39;may&#39;,&#39;nig&#39;,&#39;pue&#39;,&#39;uni&#39;),&#39;bel&#39;), str_c(c(&#39;abe&#39;,&#39;gum&#39;,&#39;nig&#39;,&#39;pue&#39;,&#39;ran&#39;,&#39;uni&#39;),&#39;hon&#39;), str_c(c(&#39;nig&#39;,&#39;pue&#39;,&#39;uni&#39;),&#39;pan&#39;)), weight = c(1,1.45,1)) %&gt;% purrr::pmap(network_layout) %&gt;% bind_rows() plot_list &lt;- networx %&gt;% purrr::pmap(plot_network, node_lab_shift = .2) 3.2.3 Plotting To create the first panel of Figure 1, we combine the three networks and label the locations. p1 &lt;- cowplot::plot_grid( grid::textGrob(&#39;Belize&#39;), grid::textGrob(&#39;Honduras&#39;), grid::textGrob(&#39;Panama&#39;), plot_list[[1]], plot_list[[2]], plot_list[[3]], ncol = 3, rel_heights = c(.1,1)) Now, we can create the second panel of Figure 1, by plotting our prepared data tibble. We are going to plot each boxplot element as a single layer. (This, might seem a little cumbersome given geom_boxplot(), but this approach was choosen for specific fine tuning of the postioning, dropping of outliers and reducing runtime during the plotting phase - otherwise the entire genome wide data set would have been carried though whole script.) p2 &lt;- data %&gt;% ggplot(aes(color = popstat_loc)) + # adding whiskers geom_segment(aes(x = x_dodge, xend = x_dodge, y = lowpoint_scaled,yend = highpoint_scaled)) + # adding box (inter quartile range) geom_rect(aes(xmin = x_start_dodge, xmax = x_end_dodge, ymin = lower_scaled, ymax = upper_scaled), fill=&#39;white&#39;)+ # adding bar (median) geom_segment(aes(x = x_start_dodge, xend = x_end_dodge, y = median_scaled, yend = median_scaled),lwd = .9)+ # adding point (mean) geom_point(aes(x = x_dodge, y = mean_scaled),shape = 21, size = .7, fill = &#39;white&#39;)+ # layout x ayis scale_x_continuous(breaks = 1:28) + # layout primary y axis (Fst) scale_y_continuous(breaks = c(0,.05,.1,.15), name = expression(italic(F[ST])), # layout secondary y axis (dxy) sec.axis = sec_axis(~ . /scaler, name = expression(italic(d[XY])), breaks = c(0,.005,.01)))+ # define color scheme scale_color_manual(values = c(make_faint_clr(&#39;bel&#39;), make_faint_clr(&#39;hon&#39;), make_faint_clr(&#39;pan&#39;))[c(1,3,5,2,4,6)])+ # set plot range coord_cartesian(xlim = c(-1,29), expand = c(0,0))+ # tune plot appreance theme_minimal()+ theme(axis.title.x = element_blank(), legend.position = &#39;none&#39;, strip.placement = &#39;outside&#39;, strip.text = element_text(size = 12), panel.grid.major.x = element_blank(), panel.grid.minor.y = element_blank(), axis.text.y.right = element_text(color = clr_sec), axis.title.y.right = element_text(color = clr_sec)) To create the final figure, we combine the two sub panels unsing the cowplot package. Here, we add the panel labels and define the space each panel is going to take. p_done &lt;- cowplot::plot_grid(p1,p2, ncol = 1, rel_heights = c(.7,1), labels = letters[1:2] %&gt;% project_case()) Finally, we can export Figure 1. hypo_save(p_done, filename = &#39;figures/F1.pdf&#39;, width = 9, height = 7, comment = plot_comment) The function hypo_save() is simply a wrapper around ggsave(), that will write the name of the currently running script into the meta data of the plot (after the plot has been exported). The benfit of this is that you can read this information later to remember how a specifc plot was created using hypo_show_metadata(). This is done using exiftool and has currently only been tested on my linux system. If this does not work for you, simple replace hypo_save() with ggsave() and drop the comment parameter. hypo_show_metadata(&#39;figures/F1.pdf&#39;) #&gt; [1] &quot;mother-script = /path/to/scripts/plot_F1.R&quot; "],
["figure-2.html", "4 Figure 2 4.1 Summary 4.2 Details of plot_F2.R", " 4 Figure 2 4.1 Summary This is the accessory documentation of Figure 2. The Figure can be recreated by running the R script plot_F2.R: cd $BASE_DIR Rscript --vanilla R/fig/plot_F2.R 2_analysis/dxy/50k/ \\ 2_analysis/fst/50k/multi_fst.50k.tsv.gz 2_analysis/GxP/50000/ \\ 2_analysis/summaries/fst_outliers_998.tsv \\ https://raw.githubusercontent.com/simonhmartin/twisst/master/plot_twisst.R \\ 2_analysis/twisst/weights/ ressources/plugin/trees/ \\ 2_analysis/fasteprr/step4/fasteprr.all.rho.txt.gz \\ 2_analysis/summaries/fst_globals.txt 4.2 Details of plot_F2.R In the following, the individual steps of the R script are documented. It is an executable R script that depends on the accessory R package GenomicOriginsScripts. 4.2.1 Config The scripts start with a header that contains copy &amp; paste templates to execute or debug the script: #!/usr/bin/env Rscript # run from terminal: # Rscript --vanilla R/fig/plot_F2.R 2_analysis/dxy/50k/ \\ # 2_analysis/fst/50k/multi_fst.50k.tsv.gz 2_analysis/GxP/50000/ \\ # 2_analysis/summaries/fst_outliers_998.tsv \\ # https://raw.githubusercontent.com/simonhmartin/twisst/master/plot_twisst.R \\ # 2_analysis/twisst/weights/ ressources/plugin/trees/ \\ # 2_analysis/fasteprr/step4/fasteprr.all.rho.txt.gz \\ # 2_analysis/summaries/fst_globals.txt # =============================================================== # This script produces Figure 2 of the study &quot;The genomic origins of a marine radiation&quot; # by Hench, McMillan an Puebla # --------------------------------------------------------------- # =============================================================== # args &lt;- c(&#39;2_analysis/dxy/50k/&#39;,&#39;2_analysis/fst/50k/multi_fst.50k.tsv.gz&#39;, # &#39;2_analysis/GxP/50000/&#39;, &#39;2_analysis/summaries/fst_outliers_998.tsv&#39;, # &#39;https://raw.githubusercontent.com/simonhmartin/twisst/master/plot_twisst.R&#39;, # &#39;2_analysis/twisst/weights/&#39;, &#39;ressources/plugin/trees/&#39;, # &#39;2_analysis/fasteprr/step4/fasteprr.all.rho.txt.gz&#39;, &#39;2_analysis/summaries/fst_globals.txt&#39;) The next section processes the input from the command line. It stores the arguments in the vector args. The R package GenomicOriginsScripts is loaded and the script name and the current working directory are stored inside variables (script_name, plot_comment). This information will later be written into the meta data of the figure to help us tracing back the scripts that created the figures in the future. Then we drop all the imported information besides the arguments following the script name and print the information to the terminal. args = commandArgs(trailingOnly=FALSE) # setup ----------------------- library(GenomicOriginsScripts) library(hypoimg) cat(&#39;\\n&#39;) script_name &lt;- args[5] %&gt;% str_remove(.,&#39;--file=&#39;) plot_comment &lt;- script_name %&gt;% str_c(&#39;mother-script = &#39;,getwd(),&#39;/&#39;,.) args &lt;- process_input(script_name, args) #&gt; ── Script: scripts/plot_F2.R ──────────────────────────────────────────── #&gt; Parameters read: #&gt; ★ 1: 2_analysis/dxy/50k/ #&gt; ★ 2: 2_analysis/fst/50k/multi_fst.50k.tsv.gz #&gt; ★ 3: 2_analysis/GxP/50000/ #&gt; ★ 4: 2_analysis/summaries/fst_outliers_998.tsv #&gt; ★ 5: https://raw.githubusercontent.com/simonhmartin/twisst/master/plot_twisst.R #&gt; ★ 6: 2_analysis/twisst/weights/ #&gt; ★ 7: ressources/plugin/trees/ #&gt; ★ 8: 2_analysis/fasteprr/step4/fasteprr.all.rho.txt.gz #&gt; ★ 9: 2_analysis/summaries/fst_globals.txt #&gt; ─────────────────────────────────────────── /current/working/directory ── The directories for the different data types are received and stored in respective variables. Also, we source an external r script from the original twisst github repository that we need to import the twisst data: # config ----------------------- dxy_dir &lt;- as.character(args[1]) fst_file &lt;- as.character(args[2]) gxp_dir &lt;- as.character(args[3]) outlier_table &lt;- as.character(args[4]) twisst_script &lt;- as.character(args[5]) w_path &lt;- as.character(args[6]) d_path &lt;- as.character(args[7]) recombination_file &lt;- as.character(args[8]) global_fst_file &lt;- as.character(args[9]) source(twisst_script) 4.2.2 Data import Figure 2 contains wuite a lot of different data sets. The main part of this script is just importing and organizing all of this data: In the following we’ll go step by step through the import of: differentiation data (\\(F_{ST}\\)) divergence data (\\(d_{XY}\\), also containing diversity data - \\(\\pi\\)) genotype \\(\\times\\) phenotype association data (\\(p_{Wald}\\)) recombination data (\\(\\rho\\)) topology weighting data We start with the import of the \\(F_{ST}\\) data, specifically the data set containing the genome wide \\(F_{ST}\\) computed for all populations simultaneously (joint \\(F_{ST}\\)). The data file is read, the columns are renamed and the genomic position is added. Then, only the genomic position and the \\(F_{ST}\\) columns are selected and a window column is added for facetting in ggplot(). # start script ------------------- # import fst data fst_data &lt;- vroom::vroom(fst_file,delim = &#39;\\t&#39;) %&gt;% select(CHROM, BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST) %&gt;% setNames(., nm = c(&#39;CHROM&#39;,&#39;BIN_START&#39;, &#39;BIN_END&#39;, &#39;n_snps&#39;, &#39;fst&#39;) ) %&gt;% add_gpos() %&gt;% select(GPOS, fst) %&gt;% setNames(., nm = c(&#39;GPOS&#39;,&#39;value&#39;)) %&gt;% mutate(window = str_c(&#39;bold(&#39;,project_case(&#39;a&#39;),&#39;):joint~italic(F[ST])&#39;)) ## Rows: 111,943 ## Cols: 6 ## chr [1]: CHROM ## dbl [5]: BIN_START, BIN_END, N_VARIANTS, WEIGHTED_FST, MEAN_FST ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message Next, we import the \\(d_{XY}\\) data. Here we are importing all 28 pairwise comparisons, so we first collect all the file paths and the iterate the data import over all files. # import dxy data dxy_files &lt;- dir(dxy_dir) dxy_data &lt;- str_c(dxy_dir,dxy_files) %&gt;% purrr::map(get_dxy) %&gt;% bind_rows() %&gt;% select(N_SITES:GPOS, run) %&gt;% mutate(pop1 = str_sub(run,1,6), pop2 = str_sub(run,8,13)) ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_abehon, pi_gumhon, dxy_abehon_gumhon, Fst_abeho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_abehon, pi_nighon, dxy_abehon_nighon, Fst_abeho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,100 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_abehon, pi_puehon, dxy_abehon_puehon, Fst_abeho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,089 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_abehon, pi_ranhon, dxy_abehon_ranhon, Fst_abeho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_abehon, pi_unihon, dxy_abehon_unihon, Fst_abeho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_gumhon, pi_nighon, dxy_gumhon_nighon, Fst_gumho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_gumhon, pi_puehon, dxy_gumhon_puehon, Fst_gumho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_gumhon, pi_ranhon, dxy_gumhon_ranhon, Fst_gumho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 109,930 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_gumhon, pi_unihon, dxy_gumhon_unihon, Fst_gumho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_indbel, pi_maybel, dxy_indbel_maybel, Fst_indbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,195 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_indbel, pi_nigbel, dxy_indbel_nigbel, Fst_indbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_indbel, pi_puebel, dxy_indbel_puebel, Fst_indbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_indbel, pi_unibel, dxy_indbel_unibel, Fst_indbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_maybel, pi_nigbel, dxy_maybel_nigbel, Fst_maybe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_maybel, pi_puebel, dxy_maybel_puebel, Fst_maybe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_maybel, pi_unibel, dxy_maybel_unibel, Fst_maybe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nigbel, pi_puebel, dxy_nigbel_puebel, Fst_nigbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nigbel, pi_unibel, dxy_nigbel_unibel, Fst_nigbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nighon, pi_puehon, dxy_nighon_puehon, Fst_nigho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,100 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nighon, pi_ranhon, dxy_nighon_ranhon, Fst_nigho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,093 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nighon, pi_unihon, dxy_nighon_unihon, Fst_nigho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,011 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nigpan, pi_puepan, dxy_nigpan_puepan, Fst_nigpa... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nigpan, pi_unipan, dxy_nigpan_unipan, Fst_nigpa... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,104 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_puebel, pi_unibel, dxy_puebel_unibel, Fst_puebe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,103 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_puehon, pi_ranhon, dxy_puehon_ranhon, Fst_pueho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,108 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_puehon, pi_unihon, dxy_puehon_unihon, Fst_pueho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,090 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_puepan, pi_unipan, dxy_puepan_unipan, Fst_puepa... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,095 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_ranhon, pi_unihon, dxy_ranhon_unihon, Fst_ranho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message From this data, we compute the divergence difference (\\(\\Delta d_{XY}\\)). dxy_summary &lt;- dxy_data %&gt;% group_by(GPOS) %&gt;% summarise(delta_dxy = max(dxy)-min(dxy), sd_dxy = sd(dxy), delt_pi = max(c(max(PI_POP1),max(PI_POP2))) - min(c(min(PI_POP1),min(PI_POP2)))) %&gt;% ungroup() %&gt;% setNames(., nm = c(&#39;GPOS&#39;, str_c(&#39;bold(&#39;,project_case(&#39;e&#39;),&#39;):Delta~italic(d[xy])&#39;), str_c(&#39;bold(&#39;,project_case(&#39;e&#39;),&#39;):italic(d[xy])~(sd)&#39;), str_c(&#39;bold(&#39;,project_case(&#39;e&#39;),&#39;):Delta~italic(pi)&#39;))) %&gt;% gather(key = &#39;window&#39;, value = &#39;value&#39;,2:4) %&gt;% filter(window == str_c(&#39;bold(&#39;,project_case(&#39;e&#39;),&#39;):Delta~italic(d[xy])&#39;)) Then we import the genotype \\(\\times\\) phenotype association data. For this, we list all the traits we want to include and then iterate the import funtion over all traits. We combine the data sets and transform the table to long format. # import G x P data traits &lt;- c(&quot;Bars.lm.50k.5k.txt.gz&quot;, &quot;Peduncle.lm.50k.5k.txt.gz&quot;, &quot;Snout.lm.50k.5k.txt.gz&quot;) trait_panels &lt;- c(Bars = str_c(&#39;bold(&#39;,project_case(&#39;h&#39;),&#39;)&#39;), Peduncle = str_c(&#39;bold(&#39;,project_case(&#39;i&#39;),&#39;)&#39;), Snout = str_c(&#39;bold(&#39;,project_case(&#39;j&#39;),&#39;)&#39;)) gxp_data &lt;- str_c(gxp_dir,traits) %&gt;% purrr::map(get_gxp) %&gt;% join_list() %&gt;% gather(key = &#39;window&#39;, value = &#39;value&#39;,2:4) ## Rows: 111,943 ## Cols: 11 ## chr [ 1]: CHROM ## dbl [10]: BIN_START, BIN_END, N_SNPs, MID_POS, BIN_RANK, BIN_NR, SNP_DENSITY, AVG_p_w... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 11 ## chr [ 1]: CHROM ## dbl [10]: BIN_START, BIN_END, N_SNPs, MID_POS, BIN_RANK, BIN_NR, SNP_DENSITY, AVG_p_w... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,943 ## Cols: 11 ## chr [ 1]: CHROM ## dbl [10]: BIN_START, BIN_END, N_SNPs, MID_POS, BIN_RANK, BIN_NR, SNP_DENSITY, AVG_p_w... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message Then, we import the genome wide \\(F_{ST}\\) summary for all 28 pair wise comparisons to be able to pick a divergence data set of an intermediatly differentiated species pair (the species pair of rank 15, close to 14.5 - the median of rank 1 to 28). # import genome wide Fst data summary -------- globals &lt;- vroom::vroom(global_fst_file, delim = &#39;\\t&#39;, col_names = c(&#39;loc&#39;,&#39;run&#39;,&#39;mean&#39;,&#39;weighted&#39;)) %&gt;% mutate(run = str_c(str_sub(run,1,3),loc,&#39;-&#39;,str_sub(run,5,7),loc), run = fct_reorder(run,weighted)) ## Rows: 28 ## Cols: 4 ## chr [2]: loc, run ## dbl [2]: mean, weighted ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message # select dxy data selectors_dxy &lt;- globals %&gt;% arrange(weighted) %&gt;% .$weighted %&gt;% .[15] select_dxy_runs &lt;- globals %&gt;% filter(weighted %in% selectors_dxy) %&gt;% .$run %&gt;% as.character() dxy_select &lt;- dxy_data %&gt;% filter(run %in% select_dxy_runs) %&gt;% mutate(window = str_c(&#39;bold(&#39;,project_case(&#39;d&#39;),&#39;): italic(d[XY])&#39;)) The \\(d_{XY}\\) data set includes also \\(\\pi\\) of the involved populations. We first extract the diversity data for each population (pop1 &amp; pop2), combine them and compute the statistics needed for ranking the populations based on their diversity. # select pi data pi_summary_1 &lt;- dxy_data %&gt;% group_by(pop1,run) %&gt;% summarise(avg_pi = mean(PI_POP1)) %&gt;% ungroup() %&gt;% set_names(., nm = c(&#39;pop&#39;,&#39;run&#39;,&#39;avg_pi&#39;)) pi_summary &lt;- dxy_data %&gt;% group_by(pop2,run) %&gt;% summarise(avg_pi = mean(PI_POP2)) %&gt;% ungroup() %&gt;% set_names(., nm = c(&#39;pop&#39;,&#39;run&#39;,&#39;avg_pi&#39;)) %&gt;% bind_rows(pi_summary_1) %&gt;% group_by(pop) %&gt;% summarise(n = length(pop), mean_pi = mean(avg_pi), min_pi = min(avg_pi), max_pi = max(avg_pi), sd_pi = sd(avg_pi)) %&gt;% arrange(n) Then, we determine an intermediatly diverse candidate of our 14 populations (rank 7, again: \\(7 \\approx median(1:14)\\)) and average over the diversities estimated in all pairwise comparisons this population was involved in. selectors_pi &lt;- pi_summary %&gt;% .$mean_pi %&gt;% sort() %&gt;% .[7] select_pi_pops &lt;- pi_summary %&gt;% filter(mean_pi %in% selectors_pi) %&gt;% .$pop %&gt;% as.character pi_data_select &lt;- dxy_data %&gt;% select(GPOS, PI_POP1, pop1 )%&gt;% set_names(., nm = c(&#39;GPOS&#39;,&#39;pi&#39;,&#39;pop&#39;)) %&gt;% bind_rows(.,dxy_data %&gt;% select(GPOS, PI_POP2, pop2 )%&gt;% set_names(., nm = c(&#39;GPOS&#39;,&#39;pi&#39;,&#39;pop&#39;))) %&gt;% group_by(GPOS,pop) %&gt;% summarise(n = length(pop), mean_pi = mean(pi), min_pi = min(pi), max_pi = max(pi), sd_pi = sd(pi)) %&gt;% filter(pop %in% select_pi_pops) %&gt;% mutate(window = str_c(&#39;bold(&#39;,project_case(&#39;b&#39;),&#39;): italic(pi)&#39;)) The import of the recombination data is pretty sraight foreward: Reading one file, adding genomic position and window coluumn for facetting. # import recombination data recombination_data &lt;- vroom::vroom(recombination_file,delim = &#39;\\t&#39;) %&gt;% add_gpos() %&gt;% mutate(window = str_c(&#39;bold(&#39;,project_case(&#39;c&#39;),&#39;): rho&#39;)) ## Rows: 11,206 ## Cols: 4 ## chr [1]: CHROM ## dbl [3]: BIN_START, BIN_END, RHO ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message Then we import the topology weighting data. This is done once per location, the data sets are combined and specific columns are selected: The gnomic position, the topologie number (format: three digits with leading zeros, hence “topo3”), relative topology rank ranging from 0 to 1, the facceting column annd the actual weight data. We also create a dummy tibble that contains the null expectation of the topology weight for the two locations (1/n, with n = number of possible topologies - n = 15 for Belize and 105 for Honduras). # import topology weighting data twisst_data &lt;- tibble(loc = c(&#39;bel&#39;,&#39;hon&#39;), panel = c(&#39;f&#39;,&#39;g&#39;) %&gt;% project_case() %&gt;% str_c(&#39;bold(&#39;,.,&#39;)&#39;)) %&gt;% purrr::pmap(match_twisst_files) %&gt;% bind_rows() %&gt;% select(GPOS, topo3,topo_rel,window,weight) ## Rows: 5,102 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,102 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,979 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,979 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,580 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,580 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,781 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,781 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,541 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,541 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,750 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,750 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,867 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,867 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,221 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,221 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,197 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,197 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,745 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,745 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,472 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,472 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,321 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,321 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,158 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,158 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,846 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,846 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,295 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,295 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,896 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,896 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,575 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,575 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,439 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,439 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,346 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,346 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,952 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,952 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,176 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,176 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 3,122 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 3,122 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,050 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,050 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 3,503 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 3,503 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,408 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,408 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 6,340 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 6,340 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,831 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,831 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,079 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,079 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,778 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,778 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,003 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,003 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,164 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,164 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,463 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,463 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,511 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,511 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,024 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,024 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,741 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,741 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,566 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,566 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,487 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,487 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,115 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,115 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,536 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,536 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,205 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,205 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,898 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,898 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,674 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,674 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,656 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,656 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,236 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 5,236 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,408 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,408 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 3,281 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 3,281 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,248 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 4,248 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 3,700 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 3,700 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message twisst_null &lt;- tibble(window = c(str_c(&#39;bold(&#39;,project_case(&#39;f&#39;),&#39;):~weighting[bel]&#39;), str_c(&#39;bold(&#39;,project_case(&#39;g&#39;),&#39;):~weighting[hon]&#39;)), weight = c(1/15, 1/105)) We craete a single data set for \\(d_{XY}\\), \\(F_{ST}\\) and genotype \\(\\times\\) phenotype data. # combine data types -------- data &lt;- bind_rows(dxy_summary, fst_data, gxp_data) Then we load the positions of the the \\(F_{ST}\\) outlier windows, select the focal outliers that will receive individual labels and create a tibnble and two parameters for the label placement within the plot. # import fst outliers outliers &lt;- vroom::vroom(outlier_table, delim = &#39;\\t&#39;) ## Rows: 18 ## Cols: 7 ## chr [2]: gid, chrom ## dbl [5]: start, end, gstart, gend, gpos ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message outlier_pick &lt;- c(&#39;LG04_1&#39;, &#39;LG12_2&#39;, &#39;LG12_3&#39;) outlier_label &lt;- outliers %&gt;% filter(gid %in% outlier_pick) %&gt;% mutate(label = letters[row_number()] %&gt;% project_inv_case(), x_shift_label = c(-1,-1.2,1)*10^7, gpos_label = gpos + x_shift_label, gpos_label2 = gpos_label - sign(x_shift_label) *.5*10^7, window = str_c(&#39;bold(&#39;,project_case(&#39;a&#39;),&#39;):joint~italic(F[ST])&#39;)) outlier_y &lt;- .45 outlier_yend &lt;- .475 4.2.3 Plotting Finally it is time to put the pieces together with one giant ggplot(): p_done &lt;- ggplot()+ # add lg indication in the backgroud geom_hypo_LG()+ # add fst outlier window indication in the background geom_vline(data = outliers, aes(xintercept = gpos), color = outlr_clr)+ # add outlier label flags geom_segment(data = outlier_label, aes(x = gpos, xend = gpos_label2, y = outlier_y, yend = outlier_yend), color = alpha(outlr_clr,1),size = .2)+ # add outlier labels geom_text(data = outlier_label, aes(x = gpos_label, y = outlier_yend, label = label), color = alpha(outlr_clr,1), fontface = &#39;bold&#39;)+ # add fst, delta dxy and gxp data geom_point(data = data, aes(x = GPOS, y = value),size = plot_size, color = plot_clr) + # add dxy data geom_point(data = dxy_select,aes(x= GPOS, y = dxy),size = plot_size, color = plot_clr)+ # add pi data geom_point(data = pi_data_select, aes(x = GPOS, y = mean_pi),size = plot_size, color = plot_clr) + # add recombination data (points) geom_point(data = recombination_data, aes(x = GPOS, y = RHO),size = plot_size, color = plot_clr) + # add recombination data (smoothed) geom_smooth(data = recombination_data, aes(x = GPOS, y = RHO, group = CHROM), color = &#39;red&#39;, se = FALSE, size = .7) + # add topology weighting data geom_line(data = twisst_data, aes(x = GPOS, y = weight, color = topo_rel),size = .4) + # add topology weighting &quot;null expectation&quot; geom_hline(data = twisst_null,aes(yintercept = weight), color = rgb(1,1,1,.5), size=.4) + # color scheme lg indication scale_fill_hypo_LG_bg() + # layout x ayis scale_x_hypo_LG()+ # color scheme topology weighting scale_color_gradient( low = &quot;#f0a830ff&quot;, high = &quot;#084082ff&quot;, guide = FALSE)+ # facetting to separate the different stats facet_grid(window~.,scales = &#39;free&#39;,switch = &#39;y&#39;, labeller = label_parsed)+ # tune plot appreance theme_hypo()+ theme(legend.position = &#39;bottom&#39;, axis.title = element_blank(), strip.background = element_blank(), strip.placement = &#39;outside&#39;) hypo_save(p_done, filename = &#39;figures/F2.png&#39;, width = 297*.95, height = 275*.95, units = &#39;mm&#39;, comment = plot_comment) "],
["figure-3.html", "5 Figure 3 5.1 Summary 5.2 Details of plot_F3.R", " 5 Figure 3 5.1 Summary This is the accessory documentation of Figure 3. The Figure can be recreated by running the R script plot_F3.R: cd $BASE_DIR Rscript --vanilla R/fig/plot_F3.R \\ 2_analysis/twisst/weights/ ressources/plugin/trees/ \\ https://raw.githubusercontent.com/simonhmartin/twisst/master/plot_twisst.R \\ 2_analysis/summaries/fst_outliers_998.tsv 2_analysis/dxy/50k/ \\ 2_analysis/fst/50k/ 2_analysis/summaries/fst_globals.txt \\ 2_analysis/GxP/50000/ 200 5 5.2 Details of plot_F3.R In the following, the individual steps of the R script are documented. It is an executable R script that depends on the accessory R package GenomicOriginsScripts. 5.2.1 Config The scripts start with a header that contains copy &amp; paste templates to execute or debug the script: #!/usr/bin/env Rscript # run from terminal: # Rscript --vanilla R/fig/plot_F3.R \\ # 2_analysis/twisst/weights/ ressources/plugin/trees/ \\ # https://raw.githubusercontent.com/simonhmartin/twisst/master/plot_twisst.R \\ # 2_analysis/summaries/fst_outliers_998.tsv 2_analysis/dxy/50k/ \\ # 2_analysis/fst/50k/ 2_analysis/summaries/fst_globals.txt \\ # 2_analysis/GxP/50000/ 200 5 # =============================================================== # This script produces Figure 3 of the study &quot;The genomic origins of a marine radiation&quot; # by Hench, McMillan an Puebla # --------------------------------------------------------------- # =============================================================== # args &lt;- c(&#39;2_analysis/twisst/weights/&#39;, &#39;ressources/plugin/trees/&#39;, # &#39;https://raw.githubusercontent.com/simonhmartin/twisst/master/plot_twisst.R&#39;, # &#39;2_analysis/summaries/fst_outliers_998.tsv&#39;, # &#39;2_analysis/dxy/50k/&#39;, &#39;2_analysis/fst/50k/&#39;, # &#39;2_analysis/summaries/fst_globals.txt&#39;, # &#39;2_analysis/GxP/50000/&#39;, 200, 5) The next section processes the input from the command line. It stores the arguments in the vector args. The R package GenomicOriginsScripts is loaded and the script name and the current working directory are stored inside variables (script_name, plot_comment). This information will later be written into the meta data of the figure to help us tracing back the scripts that created the figures in the future. Then we drop all the imported information besides the arguments following the script name and print the information to the terminal. args &lt;- commandArgs(trailingOnly=FALSE) # setup ----------------------- library(GenomicOriginsScripts) library(hypoimg) library(furrr) cat(&#39;\\n&#39;) script_name &lt;- args[5] %&gt;% str_remove(.,&#39;--file=&#39;) plot_comment &lt;- script_name %&gt;% str_c(&#39;mother-script = &#39;,getwd(),&#39;/&#39;,.) args &lt;- process_input(script_name, args) ── Script: scripts/plot_F3.R ──────────────────────────────────────────── Parameters read: ★ 1: figures/data/twisst_weights/ ★ 2: figures/data/twisst_positions/ ★ 3: https://raw.githubusercontent.com/simonhmartin/twisst/master/plot_twisst.R ★ 4: figures/data/summaries/all_multi_fst_outliers_998.tsv ★ 5: figures/data/dxy/ ★ 6: figures/data/fst/ ★ 7: figures/data/summaries/fst_globals.txt ★ 8: figures/data/GxP/ ★ 9: 200 ─────────────────────────────────────────── /current/working/directory ── The directories for the different data types are received and stored in respective variables. Also, we source an external r script from the original twisst github repository that we need to import the twisst data: # config ----------------------- w_path &lt;- as.character(args[1]) d_path &lt;- as.character(args[2]) twisst_functions &lt;- as.character(args[3]) out_table &lt;- as.character(args[4]) dxy_dir &lt;- as.character(args[5]) fst_dir &lt;- as.character(args[6]) fst_globals &lt;- as.character(args[7]) gxp_dir &lt;- as.character(args[8]) twisst_size &lt;- as.numeric(args[9]) source(twisst_functions, local = TRUE) plan(multiprocess) The we define a buffer width. This is the extent left and right of the \\(F_{ST}\\) outlier windows that is included in the plots. We also load the R packages ape and igraph that will help us workung with phylogenetic objects (the twisst topologies). window_buffer &lt;- 2.5*10^5 #------------------- library(ape) library(igraph) 5.2.2 Data import Then, we start with the data import. For the figure we are going to need: \\(d_{XY}\\) data genotype \\(\\times\\) phenotype data \\(F_{ST}\\) data topology weighing data the positions of the genome annotations the positions of the \\(F_{ST}\\) outlier windows We start by importing \\(d_{XY}\\) by first listing all \\(d_{XY}\\) data files and then iterating the \\(d_{XY}\\) import function over the files. # actual script ========================================================= dxy_files &lt;- dir(dxy_dir, pattern = str_c(&#39;dxy.*[a-z]{3}.*.50kb-5kb.tsv.gz&#39;)) dxy_data &lt;- tibble(file = str_c(dxy_dir, dxy_files)) %&gt;% purrr::pmap(get_dxy) %&gt;% bind_rows() ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_abehon, pi_gumhon, dxy_abehon_gumhon, Fst_abeho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_abehon, pi_nighon, dxy_abehon_nighon, Fst_abeho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,100 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_abehon, pi_puehon, dxy_abehon_puehon, Fst_abeho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,089 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_abehon, pi_ranhon, dxy_abehon_ranhon, Fst_abeho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_abehon, pi_unihon, dxy_abehon_unihon, Fst_abeho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_gumhon, pi_nighon, dxy_gumhon_nighon, Fst_gumho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_gumhon, pi_puehon, dxy_gumhon_puehon, Fst_gumho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_gumhon, pi_ranhon, dxy_gumhon_ranhon, Fst_gumho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 109,930 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_gumhon, pi_unihon, dxy_gumhon_unihon, Fst_gumho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_indbel, pi_maybel, dxy_indbel_maybel, Fst_indbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,195 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_indbel, pi_nigbel, dxy_indbel_nigbel, Fst_indbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_indbel, pi_puebel, dxy_indbel_puebel, Fst_indbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_indbel, pi_unibel, dxy_indbel_unibel, Fst_indbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_maybel, pi_nigbel, dxy_maybel_nigbel, Fst_maybe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_maybel, pi_puebel, dxy_maybel_puebel, Fst_maybe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_maybel, pi_unibel, dxy_maybel_unibel, Fst_maybe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nigbel, pi_puebel, dxy_nigbel_puebel, Fst_nigbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nigbel, pi_unibel, dxy_nigbel_unibel, Fst_nigbe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nighon, pi_puehon, dxy_nighon_puehon, Fst_nigho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,100 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nighon, pi_ranhon, dxy_nighon_ranhon, Fst_nigho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,093 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nighon, pi_unihon, dxy_nighon_unihon, Fst_nigho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,011 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nigpan, pi_puepan, dxy_nigpan_puepan, Fst_nigpa... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 111,728 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_nigpan, pi_unipan, dxy_nigpan_unipan, Fst_nigpa... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,104 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_puebel, pi_unibel, dxy_puebel_unibel, Fst_puebe... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,103 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_puehon, pi_ranhon, dxy_puehon_ranhon, Fst_pueho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,108 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_puehon, pi_unihon, dxy_puehon_unihon, Fst_pueho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,090 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_puepan, pi_unipan, dxy_puepan_unipan, Fst_puepa... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 110,095 ## Cols: 9 ## chr [1]: scaffold ## dbl [8]: start, end, mid, sites, pi_ranhon, pi_unihon, dxy_ranhon_unihon, Fst_ranho... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message Next we iterate the genotype \\(\\times\\) phenotype import function over the trait names Bars, Snout and Peduncle. gxp_traits &lt;- c(&#39;Bars&#39;, &#39;Snout&#39;, &#39;Peduncle&#39;) gxp_data &lt;- str_c(gxp_dir,gxp_traits,&#39;.lm.50k.5k.txt.gz&#39;) %&gt;% future_map(get_gxp_long) %&gt;% bind_rows() Then, we define two sets of colors - one for the topology highlighting schemes and one for the traits of the genotype \\(\\times\\) phenotype association. twisst_clr &lt;- c(Blue = &quot;#0140E5&quot;, Bars = &quot;#E32210&quot;, Butter = &quot;#E4E42E&quot;) gxp_clr &lt;- c(Bars = &quot;#79009f&quot;, Snout = &quot;#E48A00&quot;, Peduncle = &quot;#5B9E2D&quot;) %&gt;% darken(factor = .95) %&gt;% set_names(., nm = gxp_traits) Next, we compute the average genome wide \\(d_{XY}\\) and load the average genome wide \\(F_{ST}\\) values for all 28 pair wise species comparisons. dxy_globals &lt;- dxy_data %&gt;% filter(BIN_START %% 50000 == 1 ) %&gt;% group_by( run ) %&gt;% summarise(mean_global_dxy = sum(dxy*N_SITES)/sum(N_SITES)) %&gt;% mutate(run = fct_reorder(run,mean_global_dxy)) fst_globals &lt;- vroom::vroom(fst_globals,delim = &#39;\\t&#39;, col_names = c(&#39;loc&#39;,&#39;run_prep&#39;,&#39;mean_fst&#39;,&#39;weighted_fst&#39;)) %&gt;% separate(run_prep,into = c(&#39;pop1&#39;,&#39;pop2&#39;),sep = &#39;-&#39;) %&gt;% mutate(run = str_c(pop1,loc,&#39;-&#39;,pop2,loc), run = fct_reorder(run,weighted_fst)) ## Rows: 28 ## Cols: 4 ## chr [2]: loc, run_prep ## dbl [2]: mean_fst, weighted_fst ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message After this, we import \\(F_{ST}\\) by first listing all \\(F_{ST}\\) data files and then iterating the \\(F_{ST}\\) import function over the files. fst_files &lt;- dir(fst_dir ,pattern = &#39;.50k.windowed.weir.fst.gz&#39;) fst_data &lt;- str_c(fst_dir,fst_files) %&gt;% future_map(get_fst) %&gt;% bind_rows()%&gt;% left_join(dxy_globals) %&gt;% left_join(fst_globals) %&gt;% mutate(run = refactor(., fst_globals), BIN_MID = (BIN_START+BIN_END)/2) We then add the genome wide averages of \\(F_{ST}\\) and \\(d_{XY}\\) as new columns to the \\(d_{XY}\\) data. This will be used later for coloring the \\(d_{XY}\\) panel. dxy_data &lt;- dxy_data %&gt;% left_join(dxy_globals) %&gt;% left_join(fst_globals) %&gt;% mutate(run = refactor(dxy_data, fst_globals), window = &#39;bold(italic(d[xy]))&#39;) Then, we summarise the \\(d_{XY}\\) data to compute \\(\\Delta d_{XY}\\). data_dxy_summary &lt;- dxy_data %&gt;% group_by(GPOS) %&gt;% summarise(scaffold = CHROM[1], start = BIN_START[1], end = BIN_END[1], mid = BIN_MID[1], min_dxy = min(dxy), max_dxy = max(dxy), mean_dxy = mean(dxy), median_dxy = median(dxy), sd_dxy = sd(dxy), delta_dxy = max(dxy)-min(dxy)) To only load the relevant twisst data, we first load the positions of the \\(F_{ST}\\) outlier regions. We also define a set of outliers of interest. # twisst part ------------------ outlier_table &lt;- vroom::vroom(out_table, delim = &#39;\\t&#39;) %&gt;% setNames(., nm = c(&quot;outlier_id&quot;,&quot;lg&quot;, &quot;start&quot;, &quot;end&quot;, &quot;gstart&quot;,&quot;gend&quot;,&quot;gpos&quot;)) ## Rows: 18 ## Cols: 7 ## chr [2]: gid, chrom ## dbl [5]: start, end, gstart, gend, gpos ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message outlier_pick = c(&#39;LG04_1&#39;, &#39;LG12_2&#39;, &#39;LG12_3&#39;) Then we define a set of genes of interest. These are the ones, that later will be labelled in the annotation panel. cool_genes &lt;- c(&#39;arl3&#39;,&#39;kif16b&#39;,&#39;cdx1&#39;,&#39;hmcn2&#39;, &#39;sox10&#39;,&#39;smarca4&#39;, &#39;rorb&#39;, &#39;alox12b&#39;,&#39;egr1&#39;, &#39;ube4b&#39;,&#39;casz1&#39;, &#39;hoxc8a&#39;,&#39;hoxc9&#39;,&#39;hoxc10a&#39;,#&#39;hoxc6a&#39;, #&#39;hoxc8a&#39;, &#39;hoxc13a&#39;,&#39;rarga&#39;,&#39;rarg&#39;, &#39;snai1&#39;,&#39;fam83d&#39;,&#39;mafb&#39;,&#39;sws2abeta&#39;,&#39;sws2aalpha&#39;,&#39;sws2b&#39;,&#39;lws&#39;,&#39;grm8&#39;) Next, we load the twisst data for both locations and list all species from Belize (This will be needed to calculate their pair wise distances for the topology highlighting). data_tables &lt;- list(bel = prep_data(loc = &#39;bel&#39;), hon = prep_data(loc = &#39;hon&#39;)) ## Rows: 1,195 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 1,195 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 1,080 ## Cols: 15 ## dbl [15]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 1,080 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 1,269 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 1,269 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 1,141 ## Cols: 105 ## dbl [105]: topo1, topo2, topo3, topo4, topo5, topo6, topo7, topo8, topo9, topo10, topo1... ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message ## Rows: 1,141 ## Cols: 6 ## chr [1]: scaffold ## dbl [5]: start, end, mid, sites, lnL ## ## Call `spec()` for a copy-pastable column specification ## Specify the column types with `col_types` to quiet this message pops_bel &lt;- c(&#39;ind&#39;,&#39;may&#39;,&#39;nig&#39;,&#39;pue&#39;,&#39;uni&#39;) 5.2.3 Plotting As a last step before the actual plotting, we are defing a list of outliers to be included within the final plots. neighbour_tibbles &lt;- tibble(outlier_id = outlier_pick, loc = c(rep(&#39;bel&#39;,3)), label = c(&#39;A&#39;,&#39;B&#39;,&#39;C&#39;)) Then, we iterate the main plotting function over all selected \\(F_{ST}\\) outlier windows and combine the resulting plots into a multi panel plot. p_single &lt;- outlier_table %&gt;% filter(outlier_id %in% outlier_pick) %&gt;% left_join(neighbour_tibbles) %&gt;% mutate(outlier_nr = row_number(), text = ifelse(outlier_nr == 1,TRUE,FALSE)) %&gt;% pmap(plot_curtain, cool_genes = cool_genes) %&gt;% cowplot::plot_grid(plotlist = ., nrow = 1, labels = letters[1:length(outlier_pick)] %&gt;% project_case()) At this point all that we miss is the figure legend. So, for the \\(F_{ST}\\), \\(d_{XY}\\) and genotype \\(\\times\\) phenotype color shemes we create two dummy plots from where we can export the legends. We combine those two classical color legends into what will become the left column of the legend. p_dummy_fst &lt;- outlier_table %&gt;% filter(row_number() == 1) %&gt;% purrr::pmap(plot_panel_fst) %&gt;% .[[1]] p_dummy_gxp &lt;- outlier_table %&gt;% filter(row_number() == 1) %&gt;% purrr::pmap(plot_panel_gxp) %&gt;% .[[1]] p_leg_fst &lt;- (p_dummy_fst+theme(legend.position = &#39;bottom&#39;)) %&gt;% get_legend() p_leg_gxp &lt;- (p_dummy_gxp+theme(legend.position = &#39;bottom&#39;)) %&gt;% get_legend() p_leg1 &lt;- cowplot::plot_grid(p_leg_fst,p_leg_gxp, ncol = 1) Then, we construct the topology highlighting color legend. We first define the three higlighting scenarios, the involved species and their base color and then iterate the legend plotting functions over those configurations. The resulting legend elements are then combined to create the right side of the figure legend and the two main legend elements are combined. p_leg2 &lt;- tibble(spec1 = c(&#39;indigo&#39;, &#39;indigo&#39;,&#39;unicolor&#39;), spec2 = c(&#39;maya&#39;, &#39;puella&#39;,NA), color = twisst_clr %&gt;% unname() %&gt;% darken(.,factor = .8), mode = c(rep(&#39;pair&#39;,2),&#39;isolation&#39;)) %&gt;% future_pmap(plot_leg) %&gt;% cowplot::plot_grid(plotlist = ., nrow = 1) p_leg &lt;- cowplot::plot_grid(p_leg1, p_leg2,nrow = 1, rel_widths = c(.6, 1)) After adding the legend to the main part, Figure 3 is done. p_done &lt;- cowplot::plot_grid(p_single, p_leg,ncol = 1, rel_heights = c(1, .2)) Finally, we can export Figure 3. hypo_save(plot = p_done, filename = &#39;figures/F3.pdf&#39;, width = 14, height = 11.2, comment = script_name, device = cairo_pdf) "]
]
